---
---

<section id="pricing" class="pricing">
  <div class="container">
    <div class="countdown-timer">
      <div class="countdown-title">‚è∞ √öLTIMAS <span id="vacancy-counter">17</span> VAGAS DISPON√çVEIS! ‚è∞</div>
    </div>
    
    <div class="pricing-card">
      <div class="limited-offer">
        DE R$ 997 POR APENAS:
      </div>
      
      <div class="current-price">
        <span class="zero-price">R$47,00</span>
        <span class="zero-label">R$47,00</span>
      </div>
      
      <div class="pricing-info">
        ACESSO COMPLETO LIBERADO HOJE + <br>
        B√îNUS EXCLUSIVOS AVALIADOS EM R$2.997
      </div>
      
      <a href="https://clkdmg.site/subscribe/copycash-vip-aqs-tf-pv-2412" class="btn btn-cta">GARANTIR ACESSO IMEDIATO</a>
      
      <div class="secure-badges">
        <div class="secure-item">
          <span class="secure-icon">üîí</span>
          <span>100% Seguro</span>
        </div>
        <div class="secure-item">
          <span class="secure-icon">‚ö°</span>
          <span>Acesso Imediato</span>
        </div>
        <div class="secure-item">
          <span class="secure-icon">üõ°Ô∏è</span>
          <span>Sem Risco</span>
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  .pricing {
    padding: var(--spacing-xl) 0;
  }
  
  .countdown-timer {
    max-width: 500px;
    margin: 0 auto var(--spacing-lg);
    text-align: center;
  }
  
  .countdown-title {
    font-size: 1.5rem;
    font-weight: 700;
    margin-bottom: var(--spacing-sm);
    color: #FF6B00;
    animation: pulse 2s infinite;
  }
  
  #vacancy-counter {
    color: #FF0000;
    font-weight: 800;
  }
  
  .vacancy-update {
    animation: vacancyPulse 0.5s ease;
  }
  
  @keyframes vacancyPulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.5); color: #FF0000; }
    100% { transform: scale(1); }
  }
  
  .pricing-card {
    background-color: rgba(0, 0, 0, 0.8);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    padding: var(--spacing-xl);
    max-width: 600px;
    margin: 0 auto;
    text-align: center;
    position: relative;
    box-shadow: 0 15px 30px rgba(0, 0, 0, 0.5);
  }
  
  .limited-offer {
    background-color: #c30000;
    color: white;
    padding: 12px 24px;
    margin: -50px auto 20px;
    border-radius: 5px;
    font-weight: 800;
    font-size: 16px;
    display: inline-block;
    box-shadow: 0 5px 15px rgba(195, 0, 0, 0.4);
    position: relative;
  }

  .limited-offer:before, .limited-offer:after {
    content: '';
    position: absolute;
    top: 0;
    width: 5px;
    height: 100%;
    background-color: white;
    animation: blink 1s infinite;
  }

  .limited-offer:before {
    left: 0;
  }

  .limited-offer:after {
    right: 0;
  }

  @keyframes blink {
    0%, 100% { opacity: 1; }
    50% { opacity: 0; }
  }
  
  .current-price {
    margin-bottom: var(--spacing-md);
    margin-top: var(--spacing-md);
  }
  
  .zero-price {
    font-size: 4rem;
    font-weight: 800;
    color: #00FF00;
    text-shadow: 0 0 20px rgba(0, 255, 0, 0.5);
    display: block;
  }
  
  .zero-label {
    display: block;
    font-size: 1.2rem;
    font-weight: 700;
    color: #00FF00;
    margin-top: -10px;
  }
  
  .pricing-info {
    font-size: 1.1rem;
    margin-bottom: var(--spacing-lg);
    text-transform: uppercase;
    line-height: 1.6;
    font-weight: 600;
  }
  
  .btn-cta {
    background-color: #00cc00;
    color: white;
    font-size: 1.1rem;
    font-weight: 700;
    padding: 16px 24px;
    border-radius: 6px;
    display: block;
    margin: calc(var(--spacing-md) - 10px) auto;
    max-width: 90%;
    box-shadow: 0 5px 15px rgba(0, 204, 0, 0.4);
    transition: all 0.3s ease;
    animation: greenPulse 2s infinite;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
    letter-spacing: 0.5px;
    white-space: nowrap;
    text-align: center;
  }
  
  .btn-cta:hover {
    transform: translateY(-3px);
    box-shadow: 0 8px 20px rgba(0, 204, 0, 0.6);
  }
  
  @keyframes greenPulse {
    0% {
      transform: scale(1);
      background-color: #00cc00;
      box-shadow: 0 0 10px 0 rgba(0, 204, 0, 0.5);
    }
    50% {
      transform: scale(1.05);
      background-color: #00ff00;
      box-shadow: 0 0 20px 5px rgba(0, 255, 0, 0.7);
    }
    100% {
      transform: scale(1);
      background-color: #00cc00;
      box-shadow: 0 0 10px 0 rgba(0, 204, 0, 0.5);
    }
  }
  
  @media (min-width: 768px) {
    .countdown-title {
      font-size: 1.5rem;
    }
    
    .zero-price {
      font-size: 5rem;
    }
    .btn-cta {
      font-size: 1.4rem;
      padding: 24px 36px;
      width: auto;
      display: inline-block;
    }
  }
</style>

<script>
  // Vacancy counter script
  function updateVacancyCounter() {
    const vacancyCounter = document.getElementById('vacancy-counter');
    if (!vacancyCounter) return;
    
    const startVacancies = 17;
    const endVacancies = 2;
    const totalTime = 300000; // 5 minutes in milliseconds
    const startTime = Date.now();
    
    let currentVacancies = startVacancies;
    vacancyCounter.textContent = currentVacancies;
    
    // Create an array of timestamps when vacancies will decrease
    const decreasePoints = [];
    const totalDecreases = startVacancies - endVacancies;
    
    // Distribute decrease points randomly across the 5-minute period
    for (let i = 0; i < totalDecreases; i++) {
      // Ensure decreases are somewhat spread out
      const minTime = (i / totalDecreases) * totalTime;
      const maxRangeTime = (((i + 1) / totalDecreases) * totalTime) - 5000;
      
      decreasePoints.push(minTime + Math.random() * (maxRangeTime - minTime));
    }
    
    // Sort decrease points in ascending order
    decreasePoints.sort((a, b) => a - b);
    
    const intervalId = setInterval(() => {
      const elapsedTime = Date.now() - startTime;
      
      // If 5 minutes have passed, ensure we're at the end value
      if (elapsedTime >= totalTime) {
        vacancyCounter.textContent = endVacancies;
        clearInterval(intervalId);
        return;
      }
      
      // Check if we've hit a decrease point
      while (decreasePoints.length > 0 && elapsedTime > decreasePoints[0]) {
        decreasePoints.shift();
        currentVacancies--;
        vacancyCounter.textContent = currentVacancies;
        
        // Animation effect when number changes
        vacancyCounter.classList.add('vacancy-update');
        setTimeout(() => {
          vacancyCounter.classList.remove('vacancy-update');
        }, 500);
      }
    }, 1000); // Check every second
  }

  // Start the vacancy counter when the page loads
  document.addEventListener('DOMContentLoaded', updateVacancyCounter);
</script>
