/**
 * Script para verificar o status do Service Worker
 * 
 * Este script verifica se o service worker foi gerado corretamente
 * e se est√° funcionando como esperado.
 */

import { readFileSync, statSync, readdirSync, existsSync } from 'fs';
import { join } from 'path';
import chalk from 'chalk';

// Caminho para o service worker gerado
const swPath = join(process.cwd(), 'dist', 'sw.js');

// Fun√ß√£o principal
async function checkServiceWorker() {
  console.log(chalk.blue('üîç Verificando o Service Worker...'));

  // Verifica se o arquivo do service worker existe
  if (!existsSync(swPath)) {
    console.error(chalk.red('‚ùå Service Worker n√£o encontrado em dist/sw.js'));
    console.log(chalk.yellow('‚ÑπÔ∏è Execute "npm run generate-sw" para gerar o service worker.'));
    process.exit(1);
  }

  // L√™ o conte√∫do do service worker
  const swContent = readFileSync(swPath, 'utf8');
  
  // Verifica o tamanho do arquivo
  const swSize = statSync(swPath).size;
  const swSizeKB = (swSize / 1024).toFixed(2);
  
  console.log(chalk.green(`‚úÖ Service Worker encontrado: ${swSizeKB} KB`));
  
  // Verifica se o service worker cont√©m as estrat√©gias de cache esperadas
  const hasCacheFirst = swContent.includes('CacheFirst');
  const hasStaleWhileRevalidate = swContent.includes('StaleWhileRevalidate');
  const hasNetworkFirst = swContent.includes('NetworkFirst');
  
  if (hasCacheFirst && hasStaleWhileRevalidate && hasNetworkFirst) {
    console.log(chalk.green('‚úÖ Service Worker cont√©m todas as estrat√©gias de cache esperadas'));
  } else {
    console.warn(chalk.yellow('‚ö†Ô∏è Service Worker pode n√£o conter todas as estrat√©gias de cache esperadas'));
    if (!hasCacheFirst) console.warn(chalk.yellow('  - CacheFirst n√£o encontrado'));
    if (!hasStaleWhileRevalidate) console.warn(chalk.yellow('  - StaleWhileRevalidate n√£o encontrado'));
    if (!hasNetworkFirst) console.warn(chalk.yellow('  - NetworkFirst n√£o encontrado'));
  }
  
  // Verifica se o arquivo de registro do service worker existe
  const registerSwPath = join(process.cwd(), 'public', 'js', 'register-sw.js');
  if (existsSync(registerSwPath)) {
    console.log(chalk.green('‚úÖ Script de registro do Service Worker encontrado'));
  } else {
    console.error(chalk.red('‚ùå Script de registro do Service Worker n√£o encontrado'));
    console.log(chalk.yellow('‚ÑπÔ∏è Crie o arquivo public/js/register-sw.js para registrar o service worker.'));
  }
  
  // Verifica se o service worker est√° sendo importado em algum arquivo HTML
  const distDir = join(process.cwd(), 'dist');
  const htmlFiles = findHtmlFiles(distDir);
  
  let swRegistered = false;
  for (const htmlFile of htmlFiles) {
    const htmlContent = readFileSync(htmlFile, 'utf8');
    if (htmlContent.includes('register-sw.js') || htmlContent.includes('sw.js')) {
      swRegistered = true;
      break;
    }
  }
  
  if (swRegistered) {
    console.log(chalk.green('‚úÖ Service Worker est√° sendo importado em pelo menos um arquivo HTML'));
  } else {
    console.warn(chalk.yellow('‚ö†Ô∏è Service Worker n√£o parece estar sendo importado em nenhum arquivo HTML'));
    console.log(chalk.yellow('‚ÑπÔ∏è Adicione uma refer√™ncia ao script register-sw.js em seus arquivos HTML.'));
  }
  
  console.log(chalk.blue('üîç Verifica√ß√£o do Service Worker conclu√≠da'));
}

// Fun√ß√£o para encontrar arquivos HTML em um diret√≥rio
function findHtmlFiles(dir) {
  let results = [];
  const list = readdirSync(dir);
  
  for (const file of list) {
    const filePath = join(dir, file);
    const stat = statSync(filePath);
    
    if (stat.isDirectory()) {
      results = results.concat(findHtmlFiles(filePath));
    } else if (file.endsWith('.html')) {
      results.push(filePath);
    }
  }
  
  return results;
}

// Executa a fun√ß√£o principal
checkServiceWorker().catch(error => {
  console.error(chalk.red('‚ùå Erro ao verificar o Service Worker:'), error);
  process.exit(1);
}); 